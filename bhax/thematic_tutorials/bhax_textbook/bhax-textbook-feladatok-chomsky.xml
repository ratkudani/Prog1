<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Chomsky!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Decimálisból unárisba átváltó Turing gép</title>
        <para>
            Állapotátmenet gráfjával megadva írd meg ezt a gépet!
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            <link xlink:href="https://github.com/ratkudani/Prog1/blob/master/Feladatok/unaris.c"> Unárisba váltó Turing gép</link> 
        </para>
        <para>
            A feladat lényege, hogy egy olyan programot hozzunk létre, ami a tízes számrendszerből, azaz decimálisból váltsunk át egyes számrendszerre, azaz unárisba pozitív egész számokat. A program, és elméletünk hátteréül, az előadáson áttárgyalt Turing gépet kell alapul vennünk, mint az ugyebár a lecke címében is szerepel. A folyamat során végülis egy for ciklussal megyünk végig a számon, ahol egymás után sorban megjelenített "I" vonalak fogják jelezni a számot, amit eredményül kaptunk. Először is meghívjuk az alap könvtárakat, majd deklarálunk két integer változót. Bekérünk egy egész számot, amit egy for ciklussal alakítunk át. Ami megy sorra, és húzza a vonalakat, majd ha a szám öttel osztható lesz maradék nélkül, akkor egy szóközt helyez le, hogy ezáltal is könnyebbé legyen téve az értelmezése.
        </para>
        <mediaobject>
            <imageobject>
                <imagedata fileref="../../Feladatok/turing.png"/>
            </imageobject>
            <caption>
                <para>A kép a turing gépet illusztrálja.</para>
            </caption>
        </mediaobject>
    </section>        
        
    <section>
        <title>Az a<superscript>n</superscript>b<superscript>n</superscript>c<superscript>n</superscript> nyelv nem környezetfüggetlen</title>
        <para>
            Mutass be legalább két környezetfüggő generatív grammatikát, amely ezt a nyelvet generálja!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            (A feladat megoldása során a Dicső mentorom, Pataki Donát volt)
        </para>
        <para>
            Első:
        </para>
        <para>
            S (S → aXbc)
        </para>
        <para>
            aXbc (Xb → bX)
        </para>
        <para>
            abXc (Xc → Ybcc)
        </para>
        <para>
            abYbcc (bY → Yb)
        </para>
        <para>
            aYbbcc (aY →aa)
        </para>
        <para>
            aabbcc
        </para>
        <para>
        </para>
        <para>
            Második:
        </para>
        <para>
            S (S → aXbc)
        </para>
        <para>
            aXbc (Xb → bX)
        </para>
        <para>
            abXc (Xc → Ybcc)
        </para>
        <para>
            abYbcc (bY → Yb)
        </para>
        <para>
            aYbbcc (aY → aaX)
        </para>
        <para>
            aaXbbcc (Xb → bX)
        </para>
        <para>
            aabXbcc (Xb → bX)
        </para>
        <para>
            aabbXcc (Xc → Ybcc)
        </para>
        <para>
            aabbYbccc (bY → Yb)
        </para>
        <para>
            aabYbbccc (bY → Yb)
        </para>
        <para>
            aaYbbbccc (aY → aa)
        </para>
        <para>
            aaabbbccc
        </para>
        <para>
           A feladat egyik érdekessége mielőtt jobban belemennénk az, hogy ez a lecke prezenteltálja a leginkább a feladatcsokor címeként szolgáló személyt. Noam Chomsky, az MIT egyik professzora, aki egy hihetetlen fejlesztője volt a formális nyelvtan történetében. Jelen esetben nekünk a formális nyelvek elsődleges főkategóriáját kell használnunk, a generatív nyelvtant. Ez egy olyan szabályrendszer, amellyel jelsorozatokat lehet létrehozni, azaz lekreálni olyan céllal, hogy megadja a módját az átírási eljárásnak. A feladat megoldása során az előadás diasorán szereplő példázatot használtam fel, mivel tudtam, hogy ez tökéletesen működő modja a feladat megoldásához.
        </para>
    </section>        
                
    <section>
        <title>Hivatkozási nyelv</title>
        <para>
            A <citation>KERNIGHANRITCHIE</citation> könyv C referencia-kézikönyv/Utasítások melléklete alapján definiáld 
            BNF-ben a C utasítás fogalmát!
            Majd mutass be olyan kódcsipeteket, amelyek adott szabvánnyal nem fordulnak (például C89), mással (például C99) igen.
        </para>
        <para>
            Megoldás forrása:  
        </para>
        <para>
            <link xlink:href="https://github.com/ratkudani/Prog1/blob/master/Feladatok/nyelvszabvany.c"> Nyelvi szabvány</link> 
        </para>
        <para>
            (A feladat megoldásában Pankotai Kristóf.) A program a két nyelvi keret változását mutatja be. A C99 szabvány egyik legjelentősebb újítása az volt, hogy a felhasználó immáron képes a C++ nyelv típusú kommentelését használni. Egyéb újításnak vehető a for ciklus szabadabb használata.
        </para>
    </section>                     

    <section>
        <title>Saját lexikális elemző</title>
        <para>
            Írj olyan programot, ami számolja a bemenetén megjelenő valós számokat! 
            Nem elfogadható olyan megoldás, amely maga olvassa betűnként a bemenetet, 
            a feladat lényege, hogy lexert használjunk, azaz óriások vállán álljunk és ne kispályázzunk!
        </para>
        <para>
            Megoldás forrása: 
        </para>
        <para>
            <link xlink:href="https://github.com/ratkudani/Prog1/blob/master/Feladatok/realnumber.l"> Saját lexikális elemző</link> 
        </para>
        <para>
            Ez a program a lefuttatása során egy másik programot állít elő. A lefuttatás menete: lex -o program.c program.l . A C-s programuk fordításánál pedig szükség van a végére illeszteni egy -lfl tag-et. A működési elve az, hogy az L nyelv lexelve létrehozza azt a C programot, amely egy komplex karaktersorból kitudja szűrni a valós számokat. A programot a két dupla % (százalékjel) szedi három részre. Az első harmada tartalmazza a C programba kerülő részt. A középső része tartalmazza a szabályrendszert, és a C-s ciklust. A végső harmadban pedig a komplett main rész van implementálva.
        </para>
    </section>                     

    <section>
        <title>Leetspeak</title>
        <para>
            Lexelj össze egy l33t ciphert!
        </para>
        <para>
            Megoldás forrása: 
        </para>
        <para>
            <link xlink:href="https://github.com/ratkudani/Prog1/blob/master/Feladatok/l337d1c7.l"> Saját l33t chiper</link> 
        </para>
        <para>
            A programunk az L felépítés során, egy másik C forrást hoz létre, melyet a -lfl parancssal kell lefordítani. A kódsor lényege, hogy a betű- és számkészletünkhoz rendel hasonló karaktereket, melyet a futás során kicserél. Ezt úgy éri el, hogy minden betűhöz és számhoz hozzárendel egy négy tagú mátrixot, amelyben jelöljük az általunk vélt megfelelő hasonmás karaktereket. Ennek következményeként annak alapjául, ahány karaktert adunk meg a futtatás során, annak rengeteg számú változatát kaphatjuk vissza, mivel a mátrixok és a véletlenszerűen történő ebből való változás során rengeteg verzióban kaphatunk meg egyetlen egy mondatot.
        </para>
    </section>                     


    <section>
        <title>A források olvasása</title>
        <para>
            Hogyan olvasod, hogyan értelmezed természetes nyelven az alábbi kódcsipeteket? Például
            <programlisting><![CDATA[if(signal(SIGINT, jelkezelo)==SIG_IGN)
    signal(SIGINT, SIG_IGN);]]></programlisting>
            Ha a SIGINT jel kezelése figyelmen kívül volt hagyva, akkor ezen túl is legyen
            figyelmen kívül hagyva, ha nem volt figyelmen kívül hagyva, akkor a jelkezelo függvény
            kezelje. (Miután a <command>man 7 signal</command> lapon megismertem a SIGINT jelet, a
            <command>man 2 signal</command> lapon pedig a használt rendszerhívást.)
        </para>

        <caution>
            <title>Bugok</title>
            <para>
                Vigyázz, sok csipet kerülendő, mert bugokat visz a kódba! Melyek ezek és miért? 
                Ha nem megy ránézésre, elkapja valamelyiket esetleg a splint vagy a frama?
            </para>
        </caution>
            
        <orderedlist numeration="lowerroman">
            <listitem>                                    
                <programlisting><![CDATA[if(signal(SIGINT, SIG_IGN)!=SIG_IGN)
    signal(SIGINT, jelkezelo);]]></programlisting>
            </listitem>
            <listitem>                                    
                <programlisting><![CDATA[for(i=0; i<5; ++i)]]></programlisting>            
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[for(i=0; i<5; i++)]]></programlisting>            
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[for(i=0; i<5; tomb[i] = i++)]]></programlisting>            
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[for(i=0; i<n && (*d++ = *s++); ++i)]]></programlisting>            
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[printf("%d %d", f(a, ++a), f(++a, a));]]></programlisting>            
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[printf("%d %d", f(a), a);]]></programlisting>            
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[printf("%d %d", f(&a), a);]]></programlisting>            
            </listitem>
        </orderedlist>
        <para>
           i. -> Azt jelenti, ha eddig nem volt figyelmen kívül helyezve a SIGINT jel, akkor a jelkezelő függvény kezelje majd ezt a valamit le.
        </para>
        <para>
            ii. -> Adott egy for ciklus, amely lényegi része, hogy nullától kezdve folyamatosan növelje az értékét eggyel, amíg négy nem lesz.
        </para>
        <para>
            iii. -> Ugyan az mint az előző, szóval a for ciklus addig növeli a változó értékét, amíg az nulláról el nem éri a négyet.
        </para>
        <para>
            iv. -> A célja az lenne, hogy nullától négyig a tömb valahanyadik (jelen esetben i-edik) elemének érékét növelje, viszont ez egy hibás kód, mert egyszerre van deklarálva minden, így nem tudjuk fordítani.
        </para>
        <para>
            v. -> Ez a for ciklus addig megy, amíg az i kisebb mint az n. Majd hozzácsatolunk két mutatót, amihez szükség van a két további változóra.
        </para>
        <para>
            vi. ->  Kiíratjuk a printf paranccsal a függvényünk visszatérített értékét. A kiértékelés sorrendhibája miatt hibás a program.
        </para>
        <para>
            vii. -> Két decimálist íratunk ki a printf-fel.
        </para>
        <para>
            viii. ->  Majdnem ugyan az mint az előbbi társa. Itt az "a" is változó lesz, amit az "f" fog felhasználni.
        </para>
        <para>
            A feladat teljes kidolgozása során a kötelező olvasmányok függvényelemzési részletét alkalmaztam. Segítségül hívtam még Racs Tamás munkáját a megfogalmazásom tökéletesítésében.
        </para>

    </section>                     

    <section>
        <title>Logikus</title>
        <para>
            Hogyan olvasod természetes nyelven az alábbi Ar nyelvű formulákat?
        </para>
        <programlisting language="tex"><![CDATA[$(\forall x \exists y ((x<y)\wedge(y \text{ prím})))$ 

$(\forall x \exists y ((x<y)\wedge(y \text{ prím})\wedge(SSy \text{ prím})))$ 

$(\exists y \forall x (x \text{ prím}) \supset (x<y)) $ 

$(\exists y \forall x (y<x) \supset \neg (x \text{ prím}))$
]]></programlisting>        
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/MatLog_LaTeX">https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/MatLog_LaTeX</link>
        </para>
        <para>
            <link xlink:href="https://github.com/ratkudani/Prog1/blob/master/Feladatok/matlog.tex">Matlag</link> 
        </para>
        <para>
            A feladat megértéséhez először is szükségünk van az elsőrendű logika ismeretére, ugyanis az adott példa alapján, ez négy logikai állításból áll. A legfontosabb megérteni az alap kifejezéseket. A foreall jelzi az univerzális kvantort, azaz a bármely-bármelyik, az exist, a létezik kifejezést jelöli. A wedge az implikáció és a supset pedig a konjukció és a neg pedig a negált. A program pedig AR nyelven íródott. Ezen alapvető logikai ismeretekkel már megoldható lesz a négy logikai állítás.
        </para>
        <para>
            I. -> Bármely x esetén létezik olyan y, amelynél ha x kisebb, akkor y prím szám lesz.
        </para>
        <para>
            II. -> Bármely x esetén létezik olyan y, amelynél ha x kisebb, akkor y prím szám lesz, és ha y prím szám, akkor annak második utánai is prím szám lesz.
        </para>
        <para>
            III. -> Létezik olyan y, amelynél bármely x esetén az x prím ,és x kisebb, mint y.
        </para>
        <para>
            IV. -> Létezik olyan y, amelynél bármely y kisebb x esetén az x nagyobb, és x nem prím.
        </para>
    </section>                                                                                                                                                                            

    <section>
        <title>Deklaráció</title>
            
        <para>
            Vezesd be egy programba (forduljon le) a következőket: 
        </para>

        <itemizedlist>
            <listitem>
                <para>egész</para>                        
            </listitem>
            <listitem>
                <para>egészre mutató mutató</para>                        
            </listitem>
            <listitem>
                <para>egész referenciája</para>                        
            </listitem>
            <listitem>
                <para>egészek tömbje</para>                        
            </listitem>
            <listitem>
                <para>egészek tömbjének referenciája (nem az első elemé)</para>                        
            </listitem>
            <listitem>
                <para>egészre mutató mutatók tömbje</para>                        
            </listitem>
            <listitem>
                <para>egészre mutató mutatót visszaadó függvény</para>                        
            </listitem>
            <listitem>
                <para>egészre mutató mutatót visszaadó függvényre mutató mutató</para>                        
            </listitem>
            <listitem>
                <para>egészet visszaadó és két egészet kapó függvényre mutató mutatót visszaadó, egészet kapó függvény</para>                        
            </listitem>            
            <listitem>
                <para>függvénymutató egy egészet visszaadó és két egészet kapó függvényre mutató mutatót visszaadó, egészet kapó függvényre</para>                        
            </listitem>            
        </itemizedlist>            

        <para>
            Mit vezetnek be a programba a következő nevek?
        </para>

        <itemizedlist>
            <listitem>
                <programlisting><![CDATA[int a;]]></programlisting>
                <para>Egy "a" elnevezésű int típusú változó.</para>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int *b = &a;]]></programlisting> 
                <para>Egy, a "b" egészre mutató mutató ami az "a" változóra mutat.</para>           
            </listitem>
            <listitem>
                <programlisting><![CDATA[int &r = a;]]></programlisting> 
                <para>Egy memóriacímet tartalmazó r integer mutató mutató.</para>           
            </listitem>
            <listitem>
                <programlisting><![CDATA[int c[5];]]></programlisting> 
                <para>Egy öt elemű integer típusú tömböt.</para>           
            </listitem>
            <listitem>
                <programlisting><![CDATA[int (&tr)[5] = c;]]></programlisting>  
                <para>Egy öt elemű integer típusú tömbre mutató mutató, ami a c-re mutat.</para>          
            </listitem>
            <listitem>
                <programlisting><![CDATA[int *d[5];]]></programlisting> 
                <para>Egy öt elemű integerekre mutató mutatóiból álló tömb.</para>           
            </listitem>
            <listitem>
                <programlisting><![CDATA[int *h ();]]></programlisting> 
                <para>Egy integerrel visszatérő paraméterek nélkül álló függvényre mutató mutató.</para>           
            </listitem>
            <listitem>
                <programlisting><![CDATA[int *(*l) ();]]></programlisting> 
                <para>Egy integerre mutató mutatóval visszetérő, és paraméterek nélkül álló függvényre mutató mutató.</para>           
            </listitem>
            <listitem>
                <programlisting><![CDATA[int (*v (int c)) (int a, int b)]]></programlisting>
                <para>Egy integerrel visszatérő, két integert váró függvényre mutató mutatóval visszatérő, két integert visszaváró függvény.</para>            
            </listitem>            
            <listitem>
                <programlisting><![CDATA[int (*(*z) (int)) (int, int);]]></programlisting>
                <para>Egy fuggvénymutató, ami egy integert visszaadó és két integert kapó függvényre mutató mutatót visszaadó, integert eredményül kapó függvényre.</para>            
            </listitem>            
        </itemizedlist>       

        
        <para>
            Megoldás forrása:  
        </para>
        <para>
            <link xlink:href="https://github.com/ratkudani/Prog1/blob/master/Feladatok/declar.c">A feladatok deklarálva</link>
        </para>         
        <para>
            Tutorálóm: Pataki Donát, bár segítségül hívtam Nagy Lajost is.
        </para>
        <para></para>
        <para></para>
        <para></para>
        
    </section>                     


</chapter>                
