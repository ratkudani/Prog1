<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Gutenberg!</title>
        <keywordset>
            <keyword/>
        </keywordset>
        <cover>
            <para>
                Programozás tankönyvek rövid olvasónaplói.
            </para>
        </cover>
    </info>
    <section>
        <title>Programozási alapfogalmak</title>
        <para>         
            <citation>PICI</citation>       
        </para>
        <para>
            1.2. 
            A magas szintű nyelven megírt programokat forrásszövegnek, a nyelvtani szabályokat 
            pedig szintaktikai szabályoknak nevezzük. Frodítóprogrammal tudjuk fordítani, lexikális egységekre bontja 
            tárgyprogramot hoz létre. Ezt majd futtatni kell, amit a futtató rendszer felügyel.
            Az interpretes technika nem készí tárgyprogramot, utasításonként elemz a programot, értelmezi és 
            végrehajtja. Minden nyeévnek megvan a saját szabvány, a hivatkozási nyelve. Az implementációk a 
            forsítóprogramok vagy az interpreterek, egy platformon több is lehet belőlük.  
        </para>
        <para>
            1.3.
            Imperatív nyelvek: algoritmus mely mülködteti a processzort, utasítások, változók, 
            eljárásorientált- és objektumorientált nyelvek. Deklaratív nyelvek: nem kötődnek a Neumann 
            architektúrához, funkcionális- és logikai nylevek
        </para>
        <para>
            1.4.
            Jelölésrendszerek: terminális, nem terminális, alternatíva, opció, iteráció.
            Ezekkel szintaktikai szabályoka lehet írni: bal oldalon nem formális, :, majd elemsorozat.
            Programozni megtanulni papíron nem lehet.
        </para>
        <para>
            2.4.
            Az adattípus absztrakt programozási eszköz, más eszköz  komponenseként jelenik meg. 
            Az adattípust a tartomány (amilyen típust felvehet), a művelet (amit a tartomány elemein 
            elvégezhet) és a reprezentáció (az értékek tárban való megjelenése) határoz meg.
            A programozó is definiálhat típusokat. Az alaptípusból tudunk más típust (alaptípust) 
            származtatni, szűkített tartománnyal de ugyanolyan műveletekkel.
        </para>
        <para>
            2.4.1.
            Az egész típus belső ábrázolása fixpontos, a valósé lebegőpontos. A két típus együtt 
            a numerikus típusok, mivel numerikus műveletek hajthatók rajtuk végre
            A karakrer típus elemei a karakterek, a karakterlánccé pedig a sztringek. 
            A logikai típus tartományának elemei a hamis és az igaz érékek. A felsorolás típust saját 
            típusként lehet létrehozni, megadva  atrtomány elemeit. Sorszámozott típusnak számít az 
            egesz, karakteres, logikai és felsorolás típusok (minden elemnek van megelőzője és rákövetkezője).
            A sorszámozottak egy alaptípusa az intervallum típus.
        </para>
        <para>
            2.4.2.
            Összetett típus a tömb és a rekord. A tömb elemei azonos típusuak, lehetnek egy vagy többdimenziósak. 
            A tömb elemeire indexek tségével tudunk hivatkozni. Absztrakt adatszerkezetek 
            folytonos ábrázolására alkalmas. A rekord tartományának elemei értékcsoportok, melyek elemei (mezői) 
            különböző típusuak lehetnek. Minden mezőnek van neve és típusa. A C és a Pascal esetében is 
            a rekord típusa egyszintű (nincsenek almezők), de a mezők típusa lehet öszetett. A rekord nevével 
            (eszköznév) az összes mezóre tudunk hivatkozni, ha csak egyre akarunk akkor: eszköznév.mezőnév.
        </para>
        <para>
            2.4.3.
            A mutató típus tartományának elemei tárcímek, így valósítjuk meg az indirekt címezést (minden mutató egy 
            címre mutat). Van egy speciális eleme, a NULL, ami nem mutat sehova.
        </para>
        <para>
            2.5. 
            A nevesített konstansnak van neve, típusa és értéke. Mindig deklarálni kell. 
            Szerepe, hogy a sokszor előforduló értékeket beszéló névvel látjuk el, így könnyebben tudunk utalni 
            rá a szövegben, illetve ha az értékét ki akarjuk cserélni, akkor ezt elég egy helyen megtenni.
        </para>
        <para>
            2.6.
            A változónak van neve, attribútuma, címe és értéke. A kódban mindig a név jelenik meg, 
            ehhez kölönböző módon rendeljük hozzá a másik hármat. Az attribútum a változó viselkedésé határozza 
            meg a futás alatt (ez többnyire a típust jelenti). Háromfajta deklarációt különböztetünk meg itt: 
            explicit, implicit és autómatikus. A változó címe a tárnak azt arészét határozza meg, ahol 
            a vátozó értéke van. A cím rendelhető: statikus, dinamikus és a programozó által vezérelt 
            tárkiosztással. A változó értéke a címen elhelyezkedő bitkombináció. Az érték meghatározható: 
            érékadó uatsítással. A kezdőértékadás lehet: explicit (a programozó választ a típusnak megfelelő 
            tetszóleges értéket) és autómatikus (a programtól kap 0-áskezdőértéket).
        </para>
    </section> 
           
           
    <section>
        <title>Programozás bevezetés</title>
        <para>                
            <citation>KERNIGHANRITCHIE</citation>
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/zmfT9miB-jY">https://youtu.be/zmfT9miB-jY</link>
        </para> 
        <para>
            1.1.
            Annak a módja, hogy egy programozási nyelvet elsajátítsunk, nem más mint higy programokat írjunk az adott nyelven. 
            A C nyleg tanulását is kezdjük úgy, mint más nyelvek tanulása esetén, a legegyszerűbb programmal a 
            Hello World magyar változatával. Fordítjuk: cc figyel.c, majd futtatjuk: ./a.out. 
            Mivel a cc-vel fordítottuk ezért egy alapértelmezett kimenetbe megy az a.out-ba. 
            A C programok tetszőleges nevű függvényeket tartalmaznak amelyek a számítási műveleteket határozzák meg. 
            Speciális függvény a main (főprogram) mely minden programban elő kell forduljon. 
            Itt hívjuk meg az előre megírt függvényeket, vagy itt írjuk meg. A program olyan sorrendben végzi el 
            az utasításokat ahogy azok a main-be vannak. A függvény neve után szereplő () az argumentum listát tartalmazza, 
            a {} pedig az utasítás listát (lehetnek üresek is). 
            A printf("Figyelem emberek\n") függvényhívás a kimenetbe írja a Figyelem emberek szöveget, a végére pedig egy sortörést. 
        </para>
        <para>
            1.2.
            Egysoros kommentet a //-el, többsorosat pedig a /* */ jelek segítségével hozunk létre. Az int az egész, a float a lebegő, char a karakter, 
            stb típusú váltózókat jelöli. Sorok végét ;-vel zárjuk le.
            A while ciklus működése: akkor áll le, amikor a feltétel hamissá válik. 
            A printf-ben lévő %-al meg tudjuk adni, hogy a kiírandó szám milyen típusú lesz.
        </para>
        <para>
            1.3.
            A for ciklus sokban hasonlít a while-hoz, ő is akkor lép ki a ciklusból, ha a feltétel hamissá válik.
        </para>
        <para>
            1.4.
            A #define segítségével a program elején szimbolikus állandót vagy változót adunk egy karakterlánchoz.
        </para>
        <para>
            1.5.
            A getchar() függvény híváskor karaktert olvas be, a putchar() hívásakor pedig karaktert ír a kimenetre.
        </para>
  </section>
    <section>
        <title>Programozás</title>
        <para>                
            <citation>BMECPP</citation>
        </para>
	<para>
            A könyv első részében (16.oldalig) a C++ nem objektumorientált különbségei, újításai vannak a C nyelvhez képest.
	</para>
	<para>
            Függvényparaméterek és visszatérési érték: az üres paraméterlista azt jelenti, nincs a függvénynek paramétere, nem pedig azt, hogy tetszőleges számú paraméterrel hívható.
	</para>
	<para>
            A main függvénynek tudunk parancssor argumentumokat adni, illetve nem kötelező a return 0; használata, ez alapértelmezés.
	</para>
	<para>
            A bool típus használata átláthatóbb, praktikusabb kódot eredményez.
	</para>
	<para>
            A C++-ban mindenhol állhat deklaráció, ahol utasítás is.
	</para>
	<para>
            Függvények túlterhelése: ugyanolyan néven több függvényt is létrehozhatunk, amennyiben különbözik az argumentumlistájuk. A függvényt nem csak a neve, hanem argumentumlistája is meghatározza, ezáltal a névadás egyszerűbbé válik.
	</para>
	<para>
            Alapértelmezett függvényargumentumok: megadhatunk alapértelmezett függvényargumentumokat is, melyek híváskor elhagyhatók. Arra viszont ügyelnünk kell, hogy milyen sorrendben hagyhatók el.
	</para>
	<para>
            Refetípussal történő paraméterátadás: a cím szerinti átadás egy modszere, mely sokat egyszerűsíthet a függvényünkön, nem kell mindenhol mutatót hasznáni, ha referenciaátadást alkalmazunk. Itt is vigyázni kell néhány dologra, pédául arra, hogy egy függvényben sose adjunk vissza pointert vagy referanciát lokális változóra vagy érték szerint átadott paraméterre.
	</para>
    </section>
</chapter>
