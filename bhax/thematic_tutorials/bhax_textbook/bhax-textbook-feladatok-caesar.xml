<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Caesar!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title><type>double **</type> háromszögmátrix</title>
        <para>
            Írj egy olyan <function>malloc</function> és <function>free</function>
            párost használó C programot, amely helyet foglal
            egy alsó háromszög mátrixnak a szabad tárban!
        </para>
        <para>
            Megoldás forrása:  
        </para>
        <para>
        <link xlink:href="https://github.com/ratkudani/Prog1/blob/master/Feladatok/dmatrix.c">Mátrix megoldása</link> 
        </para>
        <para>
            A programunk egy négyzetes mátrixról szó, amelynek a fő tulajdonsága az, hogy oszlopainak és sorainak száma megegyezik, és a főátlója alatt csupa nullákat kapunk, bár a kódunkban majd az átló alatti rész lesz csupa nulla. Először is deklaráljuk a két fő válrozónkat, ami a sorok száma lesz, és a tm mutatót, ami double típusú. Az if-ben szereplő részt megírva, a tm változó eredménye a malloc paranccsal megkapott tárterületet, ami a sor, szorozva 8 bájtnyi mérettel rendelkezik. A malloc-ot rá lehet kényszeríteni, hogy bármit visszaadjon, mert alapesetben void*-ot adna vissza. Ezután vizsgáljuk, hogy a malloc tud-e egyáltalán területet foglalni, mert ha nem, akkor a return -1-e visszaugrunk a program elejére. A lényegi rész ezután következik, ugyanis önmagával a malloc-cal a sikeres memóriafoglalás után megkapjuk a méretet, és a hozzájuk kapcsolódó mutató mutatót. Ehhez kell hasznosítanunk a feladat címében is szereplő pointer, azaz mutató egységet, a double**-ot. A program végén lévő for ciklus szegmens pedig feltölti a mátrixunk alsó felét.
        </para> 
        <mediaobject>
            <imageobject>
                <imagedata fileref="../../Feladatok/doublecscs.png"/>
            </imageobject>
            <caption>
                <para>A kép, a double ** háromszögmátrixot ábrázolja.</para>
                <para>Forrás: Bátfai Norbert prezentációjából.</para>
            </caption>
        </mediaobject>         
    </section>        
    <section>
        <title>C EXOR titkosító</title>
        <para>
            Írj egy EXOR titkosítót C-ben!
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
        <link xlink:href="https://sourceforge.net/p/udprog/code/ci/master/tree/source/labor/exor/eClean.c">C Exor feladat. </link> 
        </para>
        <para>
        <link xlink:href="https://github.com/ratkudani/Prog1/blob/master/Feladatok/eClean.c">C Exor feladat github-on. </link> 
        </para>
        <para>
            Ez a feladat a titkosításról szól, melynek a kulcsa az EXOR, azaz a kizáró vagy logikai elem. A program működéséhez szükségünk van, egy bárki által elkészített szöveget tartalmozó fájlra, mondjuk egy txt-re, amit majd a program átkódol az általunk meghatározott kulccsal, ami egy nyolc karakteres sztringként lesz kezelve, ami azért fontos, mert a vissza kódoláshoz is ekkora hosszúságú kulcs kell, amivel majd a későbbiekben dekódolni is tudjuk. Maga a forrásnak a megírását a kulcs méretének és a buffer méretének meghatározásával kezdjük, amelyek konstansok lesznek. A main-be deklarálnunk kell a kulcs és a buffer tömböket, amik a szükséges kulcsot és az eredményt tárolják. A deklarált két int, a a kulcsunk aktuális részét/elemét mutatja, amivel végbe megy majd a művelet, és a második pedig, a beolvasott bájtoknak az összegét mondja meg. A harmadik int, azaz a kulcs_meret során használjuk strlen és a strncpy függvényekre, amelyeknek a lényege, hogy lerögzíti a hosszát stringben, amíg a ncpy pedig a végső másolatát rögzíti szintén stringben. Ezután egy végső while és for ciklussal folyamatosan olvasunk a bemenetről, és tároljuk a beolvasottakat a bufferben, amíg már nem tudunk több mindent beolvasni. Ekkor a ciklusban az olvasó 0 értéket ad vissza, amivel a program véget ér. A program megírása után a gcc-vel lefordítom, majd a futtatáshoz a ./programneve kulcs <![CDATA[<a szöveges fájl, amiből kódolunk>]]> "a fájl, amibe a titkosított szövegrészlet kerül bele". 
        </para>            
    </section>        
    <section>
        <title>Java EXOR titkosító</title>
        <para>
            Írj egy EXOR titkosítót Java-ban!
        </para>
        <para>
            Megoldás forrása:              
        </para>
        <para>
        <link xlink:href="https://www.tankonyvtar.hu/hu/tartalom/tkt/javat-tanitok-javat/ch01.html"> Ezen az oldalon taláható meg a megoldás. </link> 
        </para>
        <para>
            Ebben az esetben ugyan azt akarjuk elérni, mint a C nyelvű titkosító helyzetében. Azaz hogy az általunk, vagy a felhasználó által meghatározótt kulccsal egy szintén saját választott szöveges dokumentumot kódolunk le. A szerkezete és működése ezáltal azonos lesz, az előbb említett nyelvben megírt társával. Fordítani a javac programneve.java . Majd a program futtatásához a köverkező kell: java programneve kulcs <![CDATA[> titkosított.szöveg]]> . Egyéb nyelvi különbségek között kiemelendő, hogy itt a titkosítás egy külön erre a célra létrehozott osztályban lelhető meg, amit külön kell meghívni.
        </para>            
    </section>        
    <section xml:id="bhax-textbook-feladatok-caesar.EXOR-toro">
        <title>C EXOR törő</title>
        <para>
            Írj egy olyan C programot, amely megtöri az első feladatban előállított titkos szövegeket!
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
        <link xlink:href="https://sourceforge.net/p/udprog/code/ci/master/tree/source/labor/exor/tClean.c">C Exor törés. </link> 
        </para>
        <para>
        <link xlink:href="https://github.com/ratkudani/Prog1/blob/master/Feladatok/tClean.c">C Exor törés github-on. </link> 
        </para>
        <para>
            Ez a program, az előbb megcsinált kódoló programunk által legenerált szöveges fájlt tudja dekódolni az általunk előzőleg megadott kulccsal, amely nyolc karakterből álló szting. A program alapvető definiálásból indul, ami a maximális szöveg terjedelmet, a bájtokban mért memória tárolást, a kulcs méretét, ami megint csak az említett nyolc karakterből álló sztring lehet, és végűl a szabadszoftverű operációs rendszerforrást. Ezek után az első változónk, az átlagos szóhossz, amit a beleimplementált for ciklussal a szóközök segítségével számítunk ki. Ebben az esetben az "sz" változó, a szóközök számát jelenti. A számítás végén a return utasítással úgy adjuk vissza az értéket, hogy elosztjuk a hosszúságot a szóközök megszámlált értékével. A következő szegmens a szöveg tisztaságának vizsgálata, amivel csökkentjük a törések potenciálját. A középső komponens maga az exor része lesz, amiben a for ciklussal bájtonként hajtkuk végre a műveletet. A benne levő "%" jel által lesz a kulcs mindig aktuális. Az elkövetkezendő részlet pedig a törés végrehajtása lesz. Ehhez be kell olvasni a titkos fájlt, amit egy while ciklussal érünk el addig, amíg csak van adat, ha már nincs, akkor a read 0 értékkel tér vissza, és leáll az utasítás. A rengeteg egybeágyazott for ciklussal elérjük, hogy az összes lehetséges kulcs álljon elő. Végül, ha sikerül az exortörés, kiírjuk a kulccsal a tiszta szöveget. A lefordítása alapesetű, és a futtatása megegyezik a titkosító programéval. 
        </para>            
    </section>        
    <section>
        <title>Neurális OR, AND és EXOR kapu</title>
        <para>
            R
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/NN_R">https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/NN_R</link>               
        </para>
        <para>
            <link xlink:href="https://github.com/ratkudani/Prog1/blob/master/Feladatok/nr.r"> Neurális</link>
        </para>
        <para>A feladat megoldása során Pataki Donát segítségét kértem.</para>
        <para>
            Maga a neurális hálózat, röviden definiálva a neuronok egymásba ágyazódott csoportja. A neuron leírása pedig az emberi idegrendszer legkisebb része. Ez egy olyan mesterségesen előállított neurális szerkezet, ahol a feladat címében is említett főleg logikai elemeket használjuk. Kezdetlegesen kiemelendő, hogy az OR és az AND abszolút logikai összekötőkként szolgálnak, azaz az OR lesz a VAGY tényező, amíg az AND a logikai ÉS-t jelenti. Itt és most, azt kell leszögezni, hogy a kapott értékek, azaz eredményvizsgálaté a fő szerep. Amennyiben az OR esetét tekintjük, akkor az eredményünk akkor lesz 1, ha mindkettő szegmens értéke 1. Ezzel szemben az AND logikai esetben, elég egy kitételnek, azaz csak az egyik ágazatnak értékének 1-nek lennie, hogy az eredmény is ennyi legyen. A végső eset, amiről az eddigi feladatok is szóltak, az EXOR-ról szól. Ebben az esetben pedig a kiértékelendő értékeknek különbözniük kell, (amely 0 és 1 lehet) hogy megkapjuk a célnak kitűzőtt egyest.
        </para>
        <para>
        A típusait, azaz a rétegeit tekintve három különböző réteget tudunk megnevezni. Az első az input, azaz a bemeneti layer, ahol magába a neutrális hálózatunkba visszük be az adatot. Második layeré a kimeneti réteg, ami a környezetbe viszi át az adatot. Utolsó sorban, a harmadik layer, ami a rejtett szegmens, ahol végbe megy a kapcsolódás, tanulás és a folyamatok tömkelege.
        </para>
        <mediaobject>
            <imageobject>
                <imagedata fileref="../../Feladatok/mestersegesneuron.png"/>
            </imageobject>
            <caption>
                <para>A kép, a mesterséges neuron vázlatát kívánja bemutatni.</para>
                <para>Forrás: <link xlink:href="https://hu.wikipedia.org/wiki/F%C3%A1jl:Mesters%C3%A9ges_neuron_v%C3%A1zlatos_rajza.png">https://hu.wikipedia.org/wiki/F%C3%A1jl:Mesters%C3%A9ges_neuron_v%C3%A1zlatos_rajza.png</link>.</para>
            </caption>
        </mediaobject>                 
    </section>        
    <section>
        <title>Hiba-visszaterjesztéses perceptron</title>
        <para>
            C++
        </para>
        <para>
            Megoldás forrása:            
        </para>
        <para>
            <link xlink:href="https://github.com/ratkudani/Prog1/blob/master/Feladatok/perceptron.cpp"> Visszaterjesztés.</link>
        </para>
        <para>
            A feladat megoldásában Pataki Donát segített.
        </para>
        <para>
            A hiba-visszaterjesztés nélkül perceptronról szeretnék bevezetésként regélni. Önmagában ez egy, az emberi elme, annak is a központjának, azaz az agy működésének elvét szeretné lemásolni. Maga, mint algoritmus, futása során eléggé hasonlatos az előbbi feladatban szereplő társához, a Neutrális hálozathoz. Ennek viszont a menetében eltérések szerepelnek, ugyanis itt súlyokat vezetünk be a mechanikába. A súlyok lényege, hogy az első lefutás utáni kapott értéket ezek által tudjuk módosítani azáltal, hogy az említett eset értékét növeljük, vagy csökkentjük. De hogy mikor és hogyan, mennyit kéne modifikálnunk rajta? Ekkor térünk ki a teljes feladat címre, a hiba-visszaterjesztése, ugyanis ezáltal lesz megvalósítva a feladat az általunk korábban említett harmadik layerben. Ez egy lineáris módon történő folyamat során addig fogja módosítgatni magának a súlyok értékét, amíg a hibát a legkisebb mértékig nem tudjuk leredukálni, azaz az elején bevitt értékig. A futtatásunk során a szokásos C++-os konzolos verziót használjuk: g++ mlp.hpp main.cpp -o "aminek elakarjuk nevezni" -lpng. A nem lefordulás esetén odailleszthetjük a végére, hogy: -std=c++11.
        </para>            
    </section>        
        

</chapter>                
