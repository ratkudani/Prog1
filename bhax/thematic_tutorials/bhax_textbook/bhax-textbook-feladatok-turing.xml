<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Turing!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Végtelen ciklus</title>
        <para>
            Írj olyan C végtelen ciklusokat, amelyek 0 illetve 100 százalékban dolgoztatnak egy magot és egy olyat, amely  
            100 százalékban minden magot!
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            <link xlink:href="https://github.com/ratkudani/Prog1/blob/master/Feladatok/sleep.c"> Egy magot altató program. </link>
        </para>
        <para>
            <link xlink:href="https://github.com/ratkudani/Prog1/blob/master/Feladatok/1_100.c"> Egy magot 100%-ban kihasználó program.. </link>
        </para>
        <para>
            <link xlink:href="https://github.com/ratkudani/Prog1/blob/master/Feladatok/mind_100.c"> Minden magot 100%-ban kihasználó program. </link>
        </para>
        <para>
            A feladat során, az egy magot 100%-osan kihasználó programban, egy olyan do ciklust használtam, amely sosem éri el az abban megadott értéket, ezáltal a végtelenségig futva terheli a processzort. Az összes magot 100%-ban leterhelő program során, meg kellett hívnunk az omp könyvtárat, amellyel a "#pragma omp parallel"-t, amivel elérjük, hogy párhuzamosan terheljük a processzor összes szálát. Emellett egy olyan paraméterek nélküli for ciklust, amellyel megkapjuk a kívánt kihasználtsági szintet. A magot altató programhoz meg kellett hívni az unistd.h nevezetű könyvtárat, amivel tudjuk már használni a nem standard sleep függvényt, ami úgy működik, hogy a bele implantált érték ideéig leállítja a processzor egy szálát. Az egész feladatot végtelen ciklusokkal oldottam meg.
        </para>            
    </section>        
        
    <section>
        <title>Lefagyott, nem fagyott, akkor most mi van?</title>
        <para>
            Mutasd meg, hogy nem lehet olyan programot írni, amely bármely más programról eldönti, hogy le fog-e fagyni vagy sem!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:  tegyük fel, hogy akkora haxorok vagyunk, hogy meg tudjuk írni a <function>Lefagy</function>
            függvényt, amely tetszőleges programról el tudja dönteni, hogy van-e benne vlgtelen ciklus:              
        </para>
        <programlisting language="c"><![CDATA[Program T100
{

	boolean Lefagy(Program P)
	{
		 if(P-ben van végtelen ciklus)
			return true;
		 else
			return false; 
	}

	main(Input Q)
	{
		Lefagy(Q)
	}
}]]></programlisting>            
        <para>
            A program futtatása, például akár az előző <filename>v.c</filename> ilyen pszeudókódjára:
            <screen><![CDATA[T100(t.c.pseudo)
true]]></screen>            
            akár önmagára
            <screen><![CDATA[T100(T100)
false]]></screen>  
            ezt a kimenetet adja.          
        </para>
        <para>
            A T100-as programot felhasználva készítsük most el az alábbi T1000-set, amelyben a
            Lefagy-ra épőlő Lefagy2 már nem tartalmaz feltételezett, csak csak konkrét kódot:
        </para>
        <programlisting language="c"><![CDATA[Program T1000
{

	boolean Lefagy(Program P)
	{
		 if(P-ben van végtelen ciklus)
			return true;
		 else
			return false; 
	}

	boolean Lefagy2(Program P)
	{
		 if(Lefagy(P))
			return true;
		 else
			for(;;); 
	}

	main(Input Q)
	{
		Lefagy2(Q)
	}

}]]></programlisting>            
        <programlisting><![CDATA[]]></programlisting>            
        <para>
            Mit for kiírni erre a <computeroutput>T1000(T1000)</computeroutput> futtatásra?
                                
            <itemizedlist>
                <listitem>
                    <para>Ha T1000 lefagyó, akkor nem fog lefagyni, kiírja, hogy true</para>                        
                </listitem>
                <listitem>
                    <para>Ha T1000 nem fagyó, akkor pedig le fog fagyni...</para>                        
                </listitem>
            </itemizedlist>
            akkor most hogy fog működni? Sehogy, mert ilyen <function>Lefagy</function>
            függvényt, azaz a T100 program nem is létezik.                
        </para>
        <para>
           (A feladat megoldásában Pankotai Kristóf segített) Egy olyan szoftvert kell megírni, ami el tudja dönteni egy adott különböző programról, hogy az lefagy-e, azaz a végtelenségig tud-e futni. Ezt nem lehet elkészíteni, mivel olyan programot nem lehet írni, ami egy másik program végtelenségét vizsgálva megelőzné azt, és annak a végére érkezve eldönthetné, hogy ez egy befagyhatatlan program-e a végtelensége miatt. Ezen kívül megemlítendő, hogy olyan kódhalmazt nem lehet írni, ami magát, a másik program kódját elemezve tudná megállapítani a feladatban felvetett probléma megoldását.
        </para>
    </section>        
                
    <section>
        <title>Változók értékének felcserélése</title>
        <para>
            Írj olyan C programot, amely felcseréli két változó értékét, bármiféle logikai utasítás vagy kifejezés
            nasználata nélkül!
        </para>
        <para>
            Megoldás forrása:  
        </para>
        <para>
            <link xlink:href="https://github.com/ratkudani/Prog1/blob/master/valtcsere.c"> Változókat felcserélő program. </link>
        </para>
        <para>
            (A feladat megoldásában Pankotai Kristóf segített)Ennek a feladatnak a megoldásához be kell kérni két számot, amelyet a megadott számokkal különböző műveleteket elvégezve megkapjuk ezeknek a sorrendben felcserélt változatát. Megemlítés képpen szeretném felhozni, hogy érdemes kisebb számokkal dolgozni az esetleges lehetséges legkisebb hibahatér megközelítése végett. A feladatban három művelet szerepel, amelyben a változókat adjuk és vonjuk ki egymásból úgy, hogy a kapott eredmény a feladatnak megfelelő módon jelenjen meg. Ez a feladat már szerepelt az első egyetemi féléves leckék között. 
        </para>
    </section>                     

    <section>
        <title>Labdapattogás</title>
        <para>
            Először if-ekkel, majd bármiféle logikai utasítás vagy kifejezés
            nasználata nélkül írj egy olyan programot, ami egy labdát pattogtat a karakteres konzolon! (Hogy mit értek
            pattogtatás alatt, alább láthatod a videókon.)
        </para>
        <para>
            Megoldás forrása:  
        </para>
        <para>
            <link xlink:href="https://github.com/ratkudani/Prog1/blob/master/Feladatok/pattog.c"> Labdapattogtató feladat megoldása. </link>
        </para>
        <para>
            <link xlink:href="https://github.com/ratkudani/Prog1/blob/master/Feladatok/pattog2.c"> Labdapattogtató feladat if nélkül. </link>
        </para>
        <para>
            Ennek a feladatnak a megoldásához meg kell hívnunk az unistd.h és a curses.h könyvtárat. A void azért kell bele, mert nem kér be semmit a program. Először is inícializálnunk kell az ablakot, amelynél figyelembe vesszük a felhasználó által kihúzott méretet. Deklaráljuk a szükséges változókat, például a kiinduló értéket és a haladás irányát. Majd egy végtelen ciklusban az ablak méretének a változását is figyelembe véve vetítjük ki a labda pattogását. Ezt folyamatosan frissítjük és a usleep-et használva megadva a sebességét halad a "labda". A pattogás menetét, azaz irányát if elágazásokkal határozzuk meg, szám szerint néggyel, amely tartalmazza a fel, le, jobbra, és a balra való irányokat.
        </para>
        <para>
            Az if elágazások nélküli feladatnál általunk előre megadott ablak, azaz pályaméret generálunk. Ebben for ciklusokkal haladunk az előbb elmített tömbben, ezzel vizsgáljuk hol van a labda helye. A ciklus futásával halad a labda, ami ha eléri valamelyik tengely falát, akkor az adott iránnyal ellentétes irányba kezdi el a mozgást. Ekkor a folyamat előjele is változik. Ezáltal láthatjuk, hogy if-eket használva elég egyszerűen kivitelezhető a megoldás. Ezek nélkül viszont már eléggé komplikálttá változott a helyzetünk. Megoldás gyanánt a matematika irányába venném az irányt, ahol egy bizonyos függvény megoldást mutathat a munkákban, még pedig az abszolútérték lesz ez. Egy képet csatolva a feladathoz láthatjuk, hogy a menetét alapul véve, a saját koordinátáink tengelyére módosítva elérhetjük a kívánt hatást.
        </para>
        <mediaobject>
            <imageobject>
                <imagedata fileref="../../Feladatok/abszolutertekfv.png"/>
            </imageobject>
            <caption>
                <para>A kép, egy általános esetű abszolútérték függvényt ábrázol.</para>
            </caption>
        </mediaobject>
        <para>
            A kép forrása : <link xlink:href="https://archive.geogebra.org/en/upload/files/magyar/rezita/absx.html">https://archive.geogebra.org/en/upload/files/magyar/rezita/absx.html</link>
        </para>
    </section>                     

    <section>
        <title>Szóhossz és a Linus Torvalds féle BogoMIPS</title>
        <para>
            Írj egy programot, ami megnézi, hogy hány bites a szó a gépeden, azaz mekkora az <type>int</type> mérete.
            Használd ugyanazt a while ciklus fejet, amit Linus Torvalds a BogoMIPS rutinjában! 
        </para>
        <para>
            Megoldás forrása:
        </para>
        <para>
            <link xlink:href="https://github.com/ratkudani/Prog1/blob/master/Feladatok/szohossz.c"> Szóhossz feladat megoldása. </link>
        </para>
        <para>
            Ebben a feladatban meg kellett vizsgálnunk az int típusnak az értékét a gépünkön. Ebben a programban két változóval kell dolgoznunk. Az egyik int értéke nulla, a másik pedig a 0x01, ami a következő sort jelöli. Ezután egy do while ciklussal növeljük a h értékét folyamatosan, egészen addig bitshift/bitwise-olnunk eggyel, amíg el nem jutunk az n által jelölt értékig. Ekkor a program megáll, és megkapjuk a bit értékét. Ebben az esetben balra bitwise-olásról van szó.
        </para>
    </section>                     

    <section>
        <title>Helló, Google!</title>
        <para>
            Írj olyan C programot, amely egy 4 honlapból álló hálózatra kiszámolja a négy lap Page-Rank 
            értékét!
        </para>
        <para>
            Megoldás forrása:
        </para>
        <para>
            <link xlink:href="https://github.com/ratkudani/Prog1/blob/master/Feladatok/PageRank.c"> PageRank feladat. </link>
        </para>
        <para>
            Először is a cégről pár szót, ha már a mai tech világ egyik, ha nem a leghatalmasabb birodalmáról beszélünk. Az alapítóik, Larry Page és Sergey Brin még az egyetemen ismerkedtek meg, ahol megfogalmazódott bennük, hogy létrehozzák a világ legjobb keresőmotorját/algoritmusát, amelyből 1998-ra egy vállalat nőtte ki magát. Ennek az algoritmusnak a céja az oldalak "jó"-ságának bemutatása, ezalatt értve a minőségét, amit az adott oldalra mutató linkek száma határozza meg. Ezáltal a ranglistán egyre előrébb kerülve, a keresőben is elsőbbséget élvezhet az adott weboldal. Összefoglalva az elméletét a lényege, hogy egy hierarchikus rendszert építsen ki a weboldalak között, melyet az oldalak linkek általi mutatása, azaz szavazata határoz meg. A hozzá tartozó kódsorban egy tömbben fogjuk eltárolni a mutatásokat, azaz a szavazatokat az egyik oldalról a másikra. Ezen felül egy for ciklussal számoltatjuk ki ezeket az értékeket, ahol a "távolságot" is figyelembe véve próbálunk egyre pontosabb eredményt kapni, amelynek a végén a program futása után a végcélt láthatjuk. A futtatása során fontos kiemelni, hogy nem szabad elfeledkezni a végére illesztett -lm kapcsolóról, ami által feltudja ismerni a C nyelvű fordítónk, hogy hogyan is kéne működnie.
        </para>
        <mediaobject>
            <imageobject>
                <imagedata fileref="../../Feladatok/pagerankmatek.png"/>
            </imageobject>
            <caption>
                <para>A képen a PageRank mögötti matematikai ábra.</para>
                <para>
                    <link xlink:href="https://hu.wikipedia.org/wiki/PageRank#/media/File:PageRanks-Example.svg">https://hu.wikipedia.org/wiki/PageRank#/media/File:PageRanks-Example.svg</link>
                </para>
            </caption>
        </mediaobject>
        
    </section>

    <section xml:id="Brun">
        <title>100 éves a Brun tétel</title>
        <para>
            Írj R szimulációt a Brun tétel demonstrálására!
        </para>
        <para>
            Megoldás forrása:
        </para>
        <para>
            <link xlink:href="https://github.com/ratkudani/Prog1/blob/master/Feladatok/stp.r"> Ikerprím feladat. </link>
        </para>
        <para>
            Maga a tétel az ikerprímekről szól, amelyek definiálva úgy tekinthetőek, mint az egymást követő prímek amik között a különbség kettő. A feladat megoldása során deklaráljuk a prímeket egy adott számig, majd a differenciáljukat nézve, a nagyobból kivonjuk a kisebbet. Egy feltétellel a diferenciált keresünk a kettesre. Páronként deklaráljuk a kapott prímeket és a tételnek megfelelően reciprokkal szorozva adjuk össze őket egymással. Legvégül pedig a programon belül egy összesített értéket adunk vissza. Bezárólag pedig, matlab könyvtár által a megadott módon tudjuk ábrázolni a kapott eredményt. Futtatni a következő módon lehet: r -f [fájl neve].
        </para>
    </section>
    
    <section xml:id="bhax-textbook-feladatok-turing.MontyHall">
        <title>A Monty Hall probléma</title>
        <para>
            Írj R szimulációt a Monty Hall problémára!
        </para>
        <para>
            Megoldás forrása:
        </para>
        <para>
            <link xlink:href="https://github.com/ratkudani/Prog1/blob/master/Feladatok/mh.r"> A Monty Hall probléma megoldása. </link>
        </para>
        <para>
            Maga a Monty Hall probléma egy paradoxon, amelyben feltétel szerint van egy játékos, egy műsorvezető és a játékosnak három ajtó közül kell választania, amelyekből csak az egyik rejti a nyereményt. Miután a játékos választott egy ajtót, a műsorvezető kinyit egy olyan ajtót ami mögött nincs nyeremény, mivel hogy ő tudja melyik ajtó mit rejt. Ezek után megkérdezi a játékost, hogy szeretne-e a választásán módosítani, és ekkor jön a lényeg. A probléma azt tartalmazza, hogy a változtatással megnő a győzelem esélye 1/3-ról 2/3-ra. Ez azért van, mert azt feltételezzük, hogy a műsorvezető az általunk nem választott két ajtó közül, azért azt nyitotta ki, amelyiket, mert a másik mögött van a jutalom. A programunk úgy épül fel, hogy először is meghatározzuk a kísérletek számát, ami bármennyi lehet, majd létrehozzuk a kísérletek és a játékosok nevű változót, ami tartalmazza a választások számát egytől háromig, és a replace=T-vel pedig engedélyezzük, hogy a tippek száma többször is előfordulhasson a kísérletek során. A műsorvezető pedig a kísérletek számával lesz megadva. Egy for ciklussal megyünk végig a kísérleteken, ebbe viszont implementálnunk kell egy if elágazásokkal vizsgáljuk ki a választásokal. Az első if-ben a nyertes lehetőség értéke megegyezik a játékos tippjével, ekkor a műsorvezető a három lehetőségből kivonja a kísérlet értékét.Más esetben pedig, amikor nem találja el egyből a győztes ajtót, akkor a három lehetőségből kivonja a tippet és ami mögött a nyeremény van. Végül pedig kiírja az így kapott értéket. Következőnek pedig meghatározzuk, hogy változtat-e a játékos vagy nem. A nem esetén megegyezik a kísérlet a játékos tippjével. Ha pedig változtat, akkor egy for ciklussal kiválasztjuk azt, ami nem az eredeti választás, és nem is a műsorvezető által nyitott ajtó. A program pedig a kísérletek számának kiíratásával, a nem vátoztatással való nyereség és a változtatással való nyereség hányadosát, és a kísérletek számához való összes nyereség számát.
        </para>
    </section>

</chapter>                
